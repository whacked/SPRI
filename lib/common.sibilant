(var fs (require "fs"))

(def expand-user (p)
     (p.replace
      (regex "^~")
      (get process.env "HOME")))

(def slurp (file-path)
     (fs.readFileSync file-path "utf-8"))

(def get-file-extension (fname)
     (var $p-file-extension (regex "(?:\\.([^.]+))?$"))
     (|> $p-file-extension
         (.exec fname)
         (get 1)))

;; see ~/dev/javascript/hyperbloviate/sib/universal.sibilant
(def merge ()
     (|> (Array.prototype.slice.call arguments)
         (tap (.unshift {}))
         (Object.assign.apply null #)))

(def select-keys (m klist)
     (with-return-var
      out {}
      (each (k) klist
            (set out k (get m k)))))

(def count (seq)
     ;; clojure-style count alias
     (get seq 'length))

(def get-or-null (obj)
     ;; return null if search path not found
     (var search-path (rest (arguments)))
     (if (or (empty? search-path)
             (not (exists? obj)))
         obj
         (call get-or-null
               (get obj (first search-path))
               ...(rest search-path))))

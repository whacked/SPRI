(var franc (require "franc")
     jp-tiny-segmenter (require "tiny-segmenter")
     stopword (require "stopword"))

;; CONSTANT
(var $pre-marker "•<"
     $post-marker ">•"
     $fuzzy-search-options {pre: $pre-marker
                            post: $post-marker
                            extract: (#(element)
                                       element.text)}
     $paragraph-separator "\n\n"
     $re-paragraph-separator (regex "\\r?\\n{2,}" "g"))

;; DATA STRUCTURE
(def make-substring-struct (t s e)
     {text: t start: s end: e})

;; UTILITY
(def quote-regex (s)
     ;; https://stackoverflow.com/a/2593661
     (|> (+ s "")
         (.replace (regex "[.?*+^$[\\]\\\\(){}|-]" "g") "\\$&")))

(def join-to-regex (tokens)
     (|> tokens
         (.map quote-regex)
         (.join "\\s*")
         (regex "i")))

(def match-to-indexes (corpus token-seq)
     ;; assumes that ALL tokens in `token-seq`
     ;; are present, in the same order, in `corpus`
     (with-return-var
      out []
      (var start-index 0)
      (each (token ith) token-seq
            (var token-start-index
                 (|> corpus
                     (.substr start-index)
                     (.indexOf token)
                     (+ start-index))
                 token-end-index (+ token-start-index token.length))
            (out.push {text: token
                       token-index: ith
                       start: token-start-index
                       end: token-end-index}))))

(def re-find-all-matches-with-indexes (corpus matcher)
     (when matcher
           (with-return-var
            out []
            (var re (regex matcher "g")
                 match true)
            (while match
                   (when (defined? (get match 'index))
                         (out.push match.index))
                   (assign match (re.exec corpus))))))

(def find-all-matches-with-indexes (corpus matcher)
     (when matcher
           (with-return-var
            out []
            (var start-idx 0
                 safety (/ corpus.length matcher.length))
            (while (and (< start-idx corpus.length)
                        (> safety 0))
                   (decr safety)
                   (var match-idx (|> corpus
                                      (.substr start-idx)
                                      (.indexOf matcher)))
                   (if (= match-idx -1)
                       (assign start-idx corpus.length)
                       (scoped
                        (out.push (+ start-idx match-idx))
                        (incr-by start-idx matcher.length)))))))

(def find-closest (expected-match expected-index corpus pre-tolerance post-tolerance)
     ;; return the starting index of the occurence of `expected-match`
     ;; within `corpus` that minimizes distance between the match and
     ;; `expected-index`; only search within given `tolerance`
     ;; when not found, returns null
     (when expected-match
           (assign pre-tolerance (or pre-tolerance
                                     ;; default to minimum tolerance
                                     ;; expected-match.length
                                     ;; default to maximum tolerance
                                     corpus.length)
                   post-tolerance (or post-tolerance
                                      ;; default to minimum tolerance
                                      ;; expected-match.length
                                     ;; default to maximum tolerance
                                      corpus.length))
      (var start-idx (Math.max 0 (- expected-index pre-tolerance))
           end-idx (Math.min (- corpus.length)
                             (+ expected-index
                                expected-match.length
                                post-tolerance)))
      (var candidates []
           sub-corpus (corpus.substring start-idx end-idx))
      (each (match) (find-all-matches-with-indexes
                     sub-corpus expected-match)
            (var abs-idx (+ start-idx match))
            (candidates.push [(Math.abs (- abs-idx expected-index)) abs-idx]))
      (if (= 0 candidates.length)
          null
          (|> candidates
              (.sort)
              (first)
              (last)))))

(def string-to-token-list (s)
     (var trimmed-string (trim s)
          franc-language-code (franc trimmed-string))
     (switch franc-language-code
             (["cmn" "jpn" "kor"]
              (|> (new jp-tiny-segmenter)
                  (.segment trimmed-string)))
             (default ;; segment on space
              (|> trimmed-string
                  (.split (regex "\\s+"))))))

(def get-most-important-words (corpus n-most)
     (|> corpus
         (string-to-token-list)
         (stopword.removeStopwords)
         ;; (filter (#(word) word) #)
         (.sort (#(a b)
                  (if (< a.length b.length) 1 -1)))
         (.slice 0 (or n-most 6))))

(def make-anchor (corpus token-locator)
     ;; corpus: string
     ;; token-locator: object, the most vanilla is
     ;;   {index: closest-token-starting-index
     ;;    token: token
     ;;    }
     ;; STRATEGY
     ;; - find 1 preceding token
     ;; - find 1 postceding token
     ;; - find 2 tokens before by importance
     ;; - find 2 tokens after by importance
     ;; each of these is expressed by an anchor object, which is
     ;; - {token: anchor-token
     ;;    offset: offset-from-target-token
     ;;    }
     ;; EXAMPLE
     ;; (make-anchor some-paragraph
     ;;              {token: some-token-in-paragraph
     ;;               token-index: closest-index})

     ;; tolerance tuning
     (var $token-length-multiplier 3
          OFFSET-TOLERANCE (|> (get token-locator 'token 'length)
                               (* $token-length-multiplier)))

     (var tokens (|> (string-to-token-list corpus)
                     (match-to-indexes corpus #))
          candidate-token (or (get token-locator 'token)
                              (corpus.substr (get token-locator 'index)
                                             (get token-locator 'length)))
          candidate-token-index (get token-locator 'token-index)
          candidate-index (or (get token-locator 'index)
                              (with-return-var
                               abs-index null
                               (var target-token-index (get token-locator 'token-index))
                               (each (spl-object i) tokens
                                     (when (= i target-token-index)
                                           ;; found match
                                           (assign abs-index (get spl-object 'start))
                                           (assign candidate-token-index i))))))

     ;; first, get exact location of target via token-locator
     (var bound-pre (Math.max 0 (- candidate-index OFFSET-TOLERANCE))
          bound-post (|> (Math.min corpus.length (+ candidate-index
                                                    (or (get token-locator 'length)
                                                        (get token-locator 'token 'length))
                                                    OFFSET-TOLERANCE)))
          ;; holds [absolute-offset-distance absolute-index]
          ;; relative to the token locator's candidate index
          candidate-list [])
     
     ;; we should now have a corpus substring via
     ;; (corpus.substring bound-pre bound-post)
     (each (match-index) (find-all-matches-with-indexes (corpus.substring bound-pre bound-post)
                                                        candidate-token)
           (var abs-index (+ bound-pre match-index))
           (candidate-list.push [(Math.abs (- candidate-index
                                              match-index
                                              abs-index))
                                 abs-index]))

     ;; guard assertions
     (when (not (number? bound-pre))
           (throw (new Error "bound-pre assertion fail")))
     (when (not (number? bound-post))
           (throw (new Error "bound-post assertion fail")))
     (when (= 0 (count candidate-list))
           (throw (new Error "no candidate tokens found")))

     (var best-abs-index (|> candidate-list
                             (.sort)
                             (first)
                             (last))
          pre-token (when (< 0 candidate-token-index)
                          (get tokens (- candidate-token-index 1)))
          post-token (when (< (+ 1 candidate-token-index)
                              tokens.length)
                           (get tokens (+ 1 candidate-token-index)))
          remaining-pre-substring (if pre-token
                                      (corpus.substring 0 (get pre-token 'start))
                                      "")
          remaining-post-substring (if post-token
                                       (corpus.substring (get post-token 'end))
                                       ""))

     ;; matched substring: (corpus.substr best-abs-index candidate-token.length)
     
     (var n-flanking-anchor 3
          pre-important-candidates (get-most-important-words remaining-pre-substring n-flanking-anchor)
          pre-important-words []
          post-important-candidates (get-most-important-words remaining-post-substring n-flanking-anchor)
          post-important-words [])

     (each (word) pre-important-candidates
           (var maybe-candidate (|> (find-all-matches-with-indexes remaining-pre-substring word)
                                    (.map (#(idx)
                                            (- idx best-abs-index)))
                                    (.sort)
                                    (first)))
           (when maybe-candidate
                 (pre-important-words.push {token: word
                                            offset: maybe-candidate})))

     (each (word) post-important-candidates
           (var maybe-candidate (|> (find-all-matches-with-indexes remaining-post-substring word)
                                    (.map (#(idx)
                                            (var abs-idx (+ idx (get post-token 'end)))
                                            (- abs-idx best-abs-index)))
                                    (.sort)
                                    (first)))
           (when maybe-candidate
                 (post-important-words.push {token: word
                                             offset: maybe-candidate})))

     {index: best-abs-index
      pre-token: (get-or-null pre-token 'text)
      pre-anchors: pre-important-words
      post-token: (get-or-null post-token 'text)
      post-anchors: post-important-words})


;;;; RESOLVERS
(def get-matching-substring-within-bounding-tokens (corpus start-tokens end-tokens)
     (var start-match (|> (join-to-regex start-tokens)
                          (corpus.match))
          end-match (|> (join-to-regex end-tokens)
                        (corpus.match)))
     (when (and start-match
                end-match)
           (var start-idx start-match.index
                end-idx (+ end-match.index
                           (get end-match 0 'length)))
           (make-substring-struct
            (corpus.substring start-idx end-idx)
            start-idx end-idx)))

(def get-matching-line-containing-bounding-tokens (corpus tokens)
      (var match (|> (join-to-regex tokens)
                     (corpus.match)))
      (when match
            (var start-idx match.index
                 bound-pre (scoped
                            (var idx (corpus.lastIndexOf "\n" match.index))
                            (if (= idx -1) 0 (+ idx 1)))
                 bound-post (scoped
                             (var idx (corpus.indexOf "\n" match.index))
                             (if (= idx -1) corpus.length idx)))
            (make-substring-struct
             (corpus.substring bound-pre bound-post)
             bound-pre bound-post)))

(def get-matching-paragraph-containing-bounding-tokens (corpus tokens)
     (var match (|> (join-to-regex tokens)
                    (corpus.match)))
     (when match
           (var start-idx match.index
                bound-pre (scoped
                           (var idx (corpus.lastIndexOf $paragraph-separator match.index))
                           (if (= idx -1)
                               match.index
                               (+ idx $paragraph-separator.length)))
                bound-post (scoped
                            (var idx (corpus.indexOf $paragraph-separator match.index))
                            (if (= idx -1)
                                match.index
                                idx)))
           (make-substring-struct
            (corpus.substring bound-pre bound-post)
            bound-pre bound-post)))

(comment
 (var fuse-file-index
      (scoped
       (var index-keys ["path" "title" "tags" "type"])
       (new Fuse
            (|> (Object.keys corpus.cache)
                (.map (#(k)
                        (|> (get corpus.cache k)
                            (select-keys (index-keys.slice 1))
                            (merge {path: k})))))
            {includeScore: true
             keys: index-keys}))))

;; ;; fuzzy resolve file
;; (each (match) (fuse-file-index.search "bash")
;;       (console.log match)
;;       (console.log match.item.path))

(comment
 (var fuse-text-index
      (new Fuse
           (corpus.get-entry-list)
           {includeMatches: true
            includeScore: true
            keys: ["title" "tags" "text" "type"]
            })))

;; ;; fuzzy resolve text
;; (each (match) (fuse-text-index.search "bash")
;;       (console.log match))

;;;; FILE NAME RESOLUTION
;; direct file name resolution
;; - tiny.org      --> tiny.org
;; - moozorgjs.org --> moozorgjs.org
;; fuzzy file name resolution
;; - t*ny.org      --> tiny.org
;; - t*ny          --> tiny.org
;; content based file name resolution
;; - #gg+#you      --> tiny.org
;; - #gg#you       --> tiny.org
;; - #gg you       --> tiny.org
;; - #gg%20you     --> tiny.org
;;;; IN-TEXT RESOLUTION (constrictor)
;;; ORG-MODE
;; headers
;; $resolved_org_file::*huh --> tiny.org::*huh (exact header)
;;; GENERAL
;;; use $RESOLVER=moozorgjs.org
;; nearest token
;; $RESOLVER#handling todo  --> file:moozorgjs.org::*Handling%20TODO (first match)
;; nearest statement / line
;; $RESOLVER#line/support+scheduled --> file:moozorgjs.org::*Implement%20todo%20attributes
;; --> i.e. "Support attributes like ~SCHEDULED:~."
;; nearest paragraph
;; $RESOLVER#para/org.js parser converter= --> intro paragraph in file:moozorgjs.org
;; nearest context-dependent section
;; $RESOLVER#section/web browser --> resolves by org resolver

;; see corpus.sibilant

;;;; SEARCH STRATEGY

;; NUMERIC ANCHOR RESOLUTION
(def get-anchor-location (anc corpus)
     )

(def assemble-text (seg-seq)
     (with-return-var
      out []
      (each (seg) (seg-seq.sort (#(a b)
                                  (if (< a.index b.index)
                                      1 -1)))
            (out.push seg.text))))

(def split-with-indexes (corpus splitter-regex-string)
     (with-return-var
      out []
      (var re (regex splitter-regex-string "g")
           last-index 0
           m (re.exec corpus)
           safety 10000)
      (while (and m
                  (< 0 safety))
             (decr safety)
             (out.push {text: (corpus.substring last-index m.index)
                        start: last-index
                        end: m.index})
             (assign last-index (+ m.index (get m 0 "length"))
                     m (re.exec corpus)))
      (when (< safety 0)
            (throw (new Error "failsafe!")))
      (when (< last-index corpus.length)
            (out.push {text: (corpus.substring last-index)
                       start: last-index
                       end: corpus.length}))))

(def is-valid-token? (maybe-token)
     (|> (regex "\\w+")
         (.test maybe-token)))

(def cmp-by-first (a b)
     (if (< (first a) (first b))
         -1 1))





;; anchor -> expand with order
(def expand-anchor (corpus matchers start-index)
     (with-return-var
      out []
      (def find-matcher (matcher start-index)
           (var limit 100
                half-width (|> matcher.length
                               (/ 2)
                               (Math.floor))
                string-before (corpus.substr (|> start-index
                                                 (- limit)
                                                 (+ 1 half-width)
                                                 (Math.max 0))
                                             limit)
                string-after (corpus.substr (- start-index half-width)
                                            limit)

                i-before (scoped
                          (var idx (string-before.lastIndexOf matcher))
                          (when (< -1 idx)
                                (|> start-index
                                    (- limit)
                                    (+ idx 1 half-width))))
                i-before-dist (if (not (= null i-before))
                                  (- start-index i-before)
                                  Infinity)

                i-after (scoped
                         (var idx (string-after.indexOf matcher))
                         (when (< -1 idx)
                               (|> start-index
                                   (+ idx)
                                   (- half-width))))
                i-after-dist (if (exists? i-after)
                                 (scoped
                                  (console.warn i-after)
                                  (- i-after start-index))
                                 Infinity)

                i-result (if (< i-before-dist i-after-dist)
                             (scoped
                              (console.log "found pre")
                              i-before)
                             (scoped
                              (console.log "found post")
                              i-after)))

           (when i-result
                 {text: (corpus.substr i-result matcher.length)
                  index: i-result
                  length: matcher.length}))
      (var cur-index start-index)
      (each (matcher) matchers
            (var maybe-found (find-matcher matcher cur-index))
            (when maybe-found
                  (out.push maybe-found)))))

;; fuzzy string match resolution
(def parse-pre-post-to-struct (s pre post pre-post-wrapper)
     (with-return-var
      out []
      (var re (regex (+ pre "(?!" post ")(.+?)" post) "g")
           last-index 0
           safety 1000)
      (var match (re.exec s))
      (while (and match
                  (< 0 safety))
             (decr safety)
             (if (and (< last-index match.index))
                 (out.push (s.substring last-index match.index)))
             (out.push (pre-post-wrapper
                        (get match 1)))
             (assign last-index (+ match.index
                                   (get match 0 'length))
                     match (re.exec s)))
      (if (< last-index s.length)
          (out.push (s.substring last-index)))))
